import cv2
import mediapipe as mp
import time

cam = cv2.VideoCapture(0)

mpHands = mp.solutions.hands
hands = mpHands.Hands(max_num_hands=2, min_detection_confidence=0.8, min_tracking_confidence=0.6)
mpDraw = mp.solutions.drawing_utils

t_old = 0
t_new = 0
switch_state = "OFF"

while True:
    success, img = cam.read()
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)

    if results.multi_hand_landmarks:
        for handLandmarks in results.multi_hand_landmarks:
            # Check for thumbs up or thumbs down
            thumb_tip = handLandmarks.landmark[mpHands.HandLandmark.THUMB_TIP]
            thumb_ip = handLandmarks.landmark[mpHands.HandLandmark.THUMB_IP]
            index_tip = handLandmarks.landmark[mpHands.HandLandmark.INDEX_FINGER_TIP]

            height, width, channel = img.shape
            thumb_tip_y = int(thumb_tip.y * height)
            thumb_ip_y = int(thumb_ip.y * height)
            index_tip_y = int(index_tip.y * height)

            # Determine switch state
            if thumb_tip_y < thumb_ip_y and thumb_tip_y < index_tip_y:  # Thumbs up
                switch_state = "ON"
                cv2.putText(img, 'Switch: OFF', (10, 70), cv2.FONT_HERSHEY_PLAIN, 3, (0, 0, 255), 3)
            elif thumb_tip_y > thumb_ip_y and thumb_tip_y > index_tip_y:  # Thumbs down
                switch_state = "OFF"
                cv2.putText(img, 'Switch: ON', (10, 70), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 3)

            # Highlight thumb tip
            cx, cy = int(thumb_tip.x * width), int(thumb_tip.y * height)
            cv2.circle(img, (cx, cy), 10, (255, 0, 255), cv2.FILLED)

            mpDraw.draw_landmarks(img, handLandmarks, mpHands.HAND_CONNECTIONS)

    t_new = time.time()
    fps = 1 / (t_new - t_old)
    t_old = t_new

    cv2.putText(img, 'FPS = ' + str(int(fps)), (10, 120), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 255), 3)

    cv2.imshow("Webcam", img)
    if cv2.waitKey(1) & 0xff == 27:
        break

cam.release()
cv2.destroyAllWindows()